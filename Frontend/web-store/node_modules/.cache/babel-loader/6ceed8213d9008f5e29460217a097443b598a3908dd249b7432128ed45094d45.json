{"ast":null,"code":"export const getPageProduct = (productCategoryId, pageNumber, sortBy) => {\n  return async dispatch => {\n    dispatch({\n      type: 'GET_PRODUCT_PAGE_REQUEST'\n    });\n    try {\n      const response = await fetch(`https://localhost:7106/api/product/getPage?productCategoryId=${productCategoryId}&pageNumber=${pageNumber}&sortBy=${sortBy}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        throw new Error(`Failed to fetch product: ${response.statusText}`);\n      }\n      const productFromDb = await response.json();\n      console.log(\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\n      console.log(productFromDb);\n      dispatch({\n        type: 'GET_PRODUCT_PAGE_SUCCESS',\n        products: productFromDb.productsOnPage,\n        isHasNext: productFromDb.isHasNext,\n        pageNumber: productFromDb.currentPageNumber,\n        sortBy: productFromDb.sortBy,\n        hasNext: productFromDb.isHasNext,\n        totalPageCount: productFromDb.totalPageCount,\n        productCategoryId: productFromDb.category.id\n      });\n    } catch (error) {\n      dispatch({\n        type: 'GET_PRODUCT_PAGE_ERROR',\n        error: error.message\n      });\n    }\n  };\n};\nexport const setSortType = newSortBy => {\n  return {\n    type: \"SET_SORT_TYPE\",\n    sortBy: newSortBy\n  };\n};\nexport const moveNextPage = () => {\n  return {\n    type: \"MOVE_NEXT_PAGE\"\n  };\n};\nexport const movePrevPage = () => {\n  return {\n    type: \"MOVE_PREV_PAGE\"\n  };\n};","map":{"version":3,"names":["getPageProduct","productCategoryId","pageNumber","sortBy","dispatch","type","response","fetch","method","headers","ok","Error","statusText","productFromDb","json","console","log","products","productsOnPage","isHasNext","currentPageNumber","hasNext","totalPageCount","category","id","error","message","setSortType","newSortBy","moveNextPage","movePrevPage"],"sources":["C:/Users/EugenDesktop/Desktop/course work/web-store/src/redux/action/ProductPageAction.js"],"sourcesContent":["export const getPageProduct = (productCategoryId, pageNumber, sortBy) => {\r\n    return async (dispatch) => {\r\n        dispatch({ type: 'GET_PRODUCT_PAGE_REQUEST' });\r\n\r\n        try {\r\n            const response = await fetch(`https://localhost:7106/api/product/getPage?productCategoryId=${productCategoryId}&pageNumber=${pageNumber}&sortBy=${sortBy}`, {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n            });\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Failed to fetch product: ${response.statusText}`);\r\n            }\r\n\r\n            const productFromDb = await response.json();\r\n\r\n            console.log(\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\")\r\n            console.log(productFromDb)\r\n\r\n            dispatch({\r\n                type: 'GET_PRODUCT_PAGE_SUCCESS',\r\n                products: productFromDb.productsOnPage,\r\n                isHasNext: productFromDb.isHasNext,\r\n                pageNumber: productFromDb.currentPageNumber,\r\n                sortBy: productFromDb.sortBy, \r\n                hasNext: productFromDb.isHasNext,\r\n                totalPageCount: productFromDb.totalPageCount,\r\n                productCategoryId: productFromDb.category.id\r\n            });\r\n        } catch (error) {\r\n            dispatch({\r\n                type: 'GET_PRODUCT_PAGE_ERROR',\r\n                error: error.message,\r\n            });\r\n        }\r\n    };\r\n};\r\n\r\nexport const setSortType = (newSortBy) =>\r\n{\r\n    return {\r\n        type: \"SET_SORT_TYPE\",\r\n        sortBy: newSortBy\r\n    }\r\n} \r\n\r\nexport const moveNextPage = () =>\r\n{\r\n    return {\r\n        type: \"MOVE_NEXT_PAGE\"\r\n    }\r\n}\r\n\r\nexport const movePrevPage = () =>\r\n{\r\n    return {\r\n        type: \"MOVE_PREV_PAGE\"\r\n    }\r\n}"],"mappings":"AAAA,OAAO,MAAMA,cAAc,GAAGA,CAACC,iBAAiB,EAAEC,UAAU,EAAEC,MAAM,KAAK;EACrE,OAAO,MAAOC,QAAQ,IAAK;IACvBA,QAAQ,CAAC;MAAEC,IAAI,EAAE;IAA2B,CAAC,CAAC;IAE9C,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,gEAAgEN,iBAAiB,eAAeC,UAAU,WAAWC,MAAM,EAAE,EAAE;QACxJK,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACL,cAAc,EAAE;QACpB;MACJ,CAAC,CAAC;MAEF,IAAI,CAACH,QAAQ,CAACI,EAAE,EAAE;QACd,MAAM,IAAIC,KAAK,CAAC,4BAA4BL,QAAQ,CAACM,UAAU,EAAE,CAAC;MACtE;MAEA,MAAMC,aAAa,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;MAE3CC,OAAO,CAACC,GAAG,CAAC,sCAAsC,CAAC;MACnDD,OAAO,CAACC,GAAG,CAACH,aAAa,CAAC;MAE1BT,QAAQ,CAAC;QACLC,IAAI,EAAE,0BAA0B;QAChCY,QAAQ,EAAEJ,aAAa,CAACK,cAAc;QACtCC,SAAS,EAAEN,aAAa,CAACM,SAAS;QAClCjB,UAAU,EAAEW,aAAa,CAACO,iBAAiB;QAC3CjB,MAAM,EAAEU,aAAa,CAACV,MAAM;QAC5BkB,OAAO,EAAER,aAAa,CAACM,SAAS;QAChCG,cAAc,EAAET,aAAa,CAACS,cAAc;QAC5CrB,iBAAiB,EAAEY,aAAa,CAACU,QAAQ,CAACC;MAC9C,CAAC,CAAC;IACN,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZrB,QAAQ,CAAC;QACLC,IAAI,EAAE,wBAAwB;QAC9BoB,KAAK,EAAEA,KAAK,CAACC;MACjB,CAAC,CAAC;IACN;EACJ,CAAC;AACL,CAAC;AAED,OAAO,MAAMC,WAAW,GAAIC,SAAS,IACrC;EACI,OAAO;IACHvB,IAAI,EAAE,eAAe;IACrBF,MAAM,EAAEyB;EACZ,CAAC;AACL,CAAC;AAED,OAAO,MAAMC,YAAY,GAAGA,CAAA,KAC5B;EACI,OAAO;IACHxB,IAAI,EAAE;EACV,CAAC;AACL,CAAC;AAED,OAAO,MAAMyB,YAAY,GAAGA,CAAA,KAC5B;EACI,OAAO;IACHzB,IAAI,EAAE;EACV,CAAC;AACL,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}