{"ast":null,"code":"export const createProduct = newProduct => {\n  return async dispatch => {\n    try {\n      const response = await fetch('https://localhost:7106/api/product/create', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(newProduct)\n      });\n      const createdProduct = await response.json();\n      dispatch({\n        type: 'CREATE_PRODUCT',\n        newProduct: createdProduct\n      });\n    } catch (error) {\n      console.error('Error creating product:', error);\n    }\n  };\n};\nexport const getProduct = productId => {\n  return async dispatch => {\n    dispatch({\n      type: 'GET_PRODUCT_REQUEST'\n    });\n    try {\n      const response = await fetch(`https://localhost:7106/api/product/get?productId=${productId}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        throw new Error(`Failed to fetch product: ${response.statusText}`);\n      }\n      const productFromDb = await response.json();\n      dispatch({\n        type: 'GET_PRODUCT_SUCCESS',\n        newCurrentProduct: productFromDb\n      });\n    } catch (error) {\n      dispatch({\n        type: 'GET_PRODUCT_ERROR',\n        error: error.message\n      });\n    }\n  };\n};\nexport const deleteProduct = productId => {\n  return async dispatch => {\n    dispatch({\n      type: 'DELETE_PRODUCT_REQUEST'\n    });\n    try {\n      const response = await fetch('https://localhost:7106/api/product/delete/' + productId, {\n        method: 'POST',\n        // Изменяем метод на POST\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          productId\n        }),\n        // Передаем productId в теле запроса\n        credentials: 'include' // Для передачи cookies (если нужно)\n      });\n\n      // Логируем весь ответ для диагностики\n      console.log('Response:', response);\n\n      // Проверим, есть ли тело ответа\n      if (response.ok) {\n        const contentType = response.headers.get('Content-Type');\n        if (contentType && contentType.includes('application/json')) {\n          // Если контент JSON, пытаемся распарсить\n          const responseBody = await response.json();\n          console.log('Response Body:', responseBody); // Выводим тело ответа\n        } else {\n          // Если это не JSON, читаем как текст\n          const responseText = await response.text();\n          console.log('Response Text:', responseText); // Выводим текстовый ответ\n        }\n      } else {\n        throw new Error(`Failed to delete product: ${response.statusText}`);\n      }\n\n      // Диспатчим успешное удаление\n      dispatch({\n        type: 'DELETE_PRODUCT_SUCCESS',\n        productId\n      });\n    } catch (error) {\n      console.error('Delete Product Error:', error); // Логируем ошибку\n      dispatch({\n        type: 'DELETE_PRODUCT_ERROR',\n        error: error.message\n      });\n    }\n  };\n};","map":{"version":3,"names":["createProduct","newProduct","dispatch","response","fetch","method","headers","body","JSON","stringify","createdProduct","json","type","error","console","getProduct","productId","ok","Error","statusText","productFromDb","newCurrentProduct","message","deleteProduct","credentials","log","contentType","get","includes","responseBody","responseText","text"],"sources":["C:/Users/EugenDesktop/Desktop/course work/web-store/src/redux/action/ProductAction.js"],"sourcesContent":["export const createProduct = (newProduct) => {\r\n    return async (dispatch) => {\r\n        try {\r\n            const response = await fetch('https://localhost:7106/api/product/create', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify(newProduct),\r\n            });\r\n\r\n            const createdProduct = await response.json();\r\n\r\n            dispatch({\r\n                type: 'CREATE_PRODUCT',\r\n                newProduct: createdProduct,\r\n            });\r\n        } catch (error) {\r\n            console.error('Error creating product:', error);\r\n        }\r\n    };\r\n};\r\n\r\nexport const getProduct = (productId) => {\r\n    return async (dispatch) => {\r\n        dispatch({ type: 'GET_PRODUCT_REQUEST' });\r\n\r\n        try {\r\n            const response = await fetch(`https://localhost:7106/api/product/get?productId=${productId}`, {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n            });\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Failed to fetch product: ${response.statusText}`);\r\n            }\r\n\r\n            const productFromDb = await response.json();\r\n\r\n            dispatch({\r\n                type: 'GET_PRODUCT_SUCCESS',\r\n                newCurrentProduct: productFromDb,\r\n            });\r\n        } catch (error) {\r\n            dispatch({\r\n                type: 'GET_PRODUCT_ERROR',\r\n                error: error.message,\r\n            });\r\n        }\r\n    };\r\n};\r\n\r\nexport const deleteProduct = (productId) => {\r\n    return async (dispatch) => {\r\n        dispatch({ type: 'DELETE_PRODUCT_REQUEST' });\r\n\r\n        try {\r\n            const response = await fetch('https://localhost:7106/api/product/delete/' + productId, {\r\n                method: 'POST', // Изменяем метод на POST\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({ productId }), // Передаем productId в теле запроса\r\n                credentials: 'include', // Для передачи cookies (если нужно)\r\n            });\r\n\r\n            // Логируем весь ответ для диагностики\r\n            console.log('Response:', response);\r\n\r\n            // Проверим, есть ли тело ответа\r\n            if (response.ok) {\r\n                const contentType = response.headers.get('Content-Type');\r\n                if (contentType && contentType.includes('application/json')) {\r\n                    // Если контент JSON, пытаемся распарсить\r\n                    const responseBody = await response.json();\r\n                    console.log('Response Body:', responseBody); // Выводим тело ответа\r\n                } else {\r\n                    // Если это не JSON, читаем как текст\r\n                    const responseText = await response.text();\r\n                    console.log('Response Text:', responseText); // Выводим текстовый ответ\r\n                }\r\n            } else {\r\n                throw new Error(`Failed to delete product: ${response.statusText}`);\r\n            }\r\n\r\n            // Диспатчим успешное удаление\r\n            dispatch({\r\n                type: 'DELETE_PRODUCT_SUCCESS',\r\n                productId,\r\n            });\r\n        } catch (error) {\r\n            console.error('Delete Product Error:', error);  // Логируем ошибку\r\n            dispatch({\r\n                type: 'DELETE_PRODUCT_ERROR',\r\n                error: error.message,\r\n            });\r\n        }\r\n    };\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}