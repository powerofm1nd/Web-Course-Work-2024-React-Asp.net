{"ast":null,"code":"export const registerNewUser = user => {\n  return async dispatch => {\n    console.log('Calling API to register user');\n    try {\n      const response = await fetch('https://localhost:7106/api/auth/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(user)\n      });\n\n      // If the response is not successful, log the response body as text or JSON\n      if (!response.ok) {\n        const responseBody = await response.text(); // Read the body as text\n        console.error(\"Error response body: \", responseBody); // Log the body text\n        throw new Error(`Error: ${responseBody}`);\n      }\n      const userFromDb = await response.json(); // Assuming the successful response is JSON\n      console.log(\"RegisterNewUser RESPONSE:\", userFromDb);\n      dispatch({\n        type: 'REGISTER_NEW_USER',\n        payload: userFromDb\n      });\n    } catch (error) {\n      console.error('Error creating user:', error); // Log any errors\n    }\n  };\n};","map":{"version":3,"names":["registerNewUser","user","dispatch","console","log","response","fetch","method","headers","body","JSON","stringify","ok","responseBody","text","error","Error","userFromDb","json","type","payload"],"sources":["C:/Users/EugenDesktop/Desktop/course work/web-store/src/redux/action/UserAction.js"],"sourcesContent":["export const registerNewUser = (user) => {\r\n    return async (dispatch) => {\r\n        console.log('Calling API to register user');\r\n        try {\r\n            const response = await fetch('https://localhost:7106/api/auth/register', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify(user),\r\n            });\r\n\r\n            // If the response is not successful, log the response body as text or JSON\r\n            if (!response.ok) {\r\n                const responseBody = await response.text(); // Read the body as text\r\n                console.error(\"Error response body: \", responseBody); // Log the body text\r\n                throw new Error(`Error: ${responseBody}`);\r\n            }\r\n\r\n            const userFromDb = await response.json(); // Assuming the successful response is JSON\r\n            console.log(\"RegisterNewUser RESPONSE:\", userFromDb);\r\n\r\n            dispatch({\r\n                type: 'REGISTER_NEW_USER',\r\n                payload: userFromDb,\r\n            });\r\n        } catch (error) {\r\n            console.error('Error creating user:', error); // Log any errors\r\n        }\r\n    };\r\n};\r\n"],"mappings":"AAAA,OAAO,MAAMA,eAAe,GAAIC,IAAI,IAAK;EACrC,OAAO,MAAOC,QAAQ,IAAK;IACvBC,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;IAC3C,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,0CAA0C,EAAE;QACrEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACL,cAAc,EAAE;QACpB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACV,IAAI;MAC7B,CAAC,CAAC;;MAEF;MACA,IAAI,CAACI,QAAQ,CAACO,EAAE,EAAE;QACd,MAAMC,YAAY,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC,CAAC,CAAC;QAC5CX,OAAO,CAACY,KAAK,CAAC,uBAAuB,EAAEF,YAAY,CAAC,CAAC,CAAC;QACtD,MAAM,IAAIG,KAAK,CAAC,UAAUH,YAAY,EAAE,CAAC;MAC7C;MAEA,MAAMI,UAAU,GAAG,MAAMZ,QAAQ,CAACa,IAAI,CAAC,CAAC,CAAC,CAAC;MAC1Cf,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAEa,UAAU,CAAC;MAEpDf,QAAQ,CAAC;QACLiB,IAAI,EAAE,mBAAmB;QACzBC,OAAO,EAAEH;MACb,CAAC,CAAC;IACN,CAAC,CAAC,OAAOF,KAAK,EAAE;MACZZ,OAAO,CAACY,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC,CAAC,CAAC;IAClD;EACJ,CAAC;AACL,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}