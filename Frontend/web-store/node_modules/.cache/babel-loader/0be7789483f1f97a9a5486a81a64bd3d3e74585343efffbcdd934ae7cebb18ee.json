{"ast":null,"code":"export const registerNewUser = user => {\n  return async dispatch => {\n    console.log('Calling API to register user'); // Logging the start of the request\n    try {\n      const response = await fetch('https://localhost:7106/api/auth/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(user)\n      });\n\n      // Check if the response was not successful\n      if (!response.ok) {\n        const responseBody = await response.text(); // Read the body as text for logging\n        console.error(\"Error response body: \", responseBody); // Log the error body\n\n        // Log all cookies after the response\n        console.log(\"Cookies after registration response:\", document.cookie);\n\n        // Throw a custom error message to be caught in the catch block\n        throw new Error(`Error: ${responseBody}`);\n      }\n\n      // Parse the response body as JSON when the response is successful\n      const userFromDb = await response.json();\n      console.log(\"RegisterNewUser RESPONSE:\", userFromDb);\n\n      // Log all cookies after the successful response\n      console.log(\"Cookies after successful registration:\", document.cookie);\n\n      // Dispatch success action with the user data from DB\n      dispatch({\n        type: 'REGISTER_NEW_USER',\n        payload: userFromDb\n      });\n    } catch (error) {\n      // Dispatch error action if something goes wrong (API error, network issue, etc.)\n      console.error('Error during user registration:', error);\n      dispatch({\n        type: 'REGISTER_NEW_USER_ERROR',\n        register_error: error.message || error // Pass the error message or full error object\n      });\n    }\n  };\n};","map":{"version":3,"names":["registerNewUser","user","dispatch","console","log","response","fetch","method","headers","body","JSON","stringify","ok","responseBody","text","error","document","cookie","Error","userFromDb","json","type","payload","register_error","message"],"sources":["C:/Users/EugenDesktop/Desktop/course work/web-store/src/redux/action/UserAction.js"],"sourcesContent":["export const registerNewUser = (user) => {\r\n    return async (dispatch) => {\r\n        console.log('Calling API to register user');  // Logging the start of the request\r\n        try {\r\n            const response = await fetch('https://localhost:7106/api/auth/register', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify(user),\r\n            });\r\n\r\n            // Check if the response was not successful\r\n            if (!response.ok) {\r\n                const responseBody = await response.text(); // Read the body as text for logging\r\n                console.error(\"Error response body: \", responseBody); // Log the error body\r\n\r\n                // Log all cookies after the response\r\n                console.log(\"Cookies after registration response:\", document.cookie);\r\n\r\n                // Throw a custom error message to be caught in the catch block\r\n                throw new Error(`Error: ${responseBody}`);\r\n            }\r\n\r\n            // Parse the response body as JSON when the response is successful\r\n            const userFromDb = await response.json();\r\n            console.log(\"RegisterNewUser RESPONSE:\", userFromDb);\r\n\r\n            // Log all cookies after the successful response\r\n            console.log(\"Cookies after successful registration:\", document.cookie);\r\n\r\n            // Dispatch success action with the user data from DB\r\n            dispatch({\r\n                type: 'REGISTER_NEW_USER',\r\n                payload: userFromDb,\r\n            });\r\n        } catch (error) {\r\n            // Dispatch error action if something goes wrong (API error, network issue, etc.)\r\n            console.error('Error during user registration:', error);\r\n            dispatch({\r\n                type: 'REGISTER_NEW_USER_ERROR',\r\n                register_error: error.message || error, // Pass the error message or full error object\r\n            });\r\n        }\r\n    };\r\n};\r\n"],"mappings":"AAAA,OAAO,MAAMA,eAAe,GAAIC,IAAI,IAAK;EACrC,OAAO,MAAOC,QAAQ,IAAK;IACvBC,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC,CAAC,CAAE;IAC9C,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,0CAA0C,EAAE;QACrEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACL,cAAc,EAAE;QACpB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACV,IAAI;MAC7B,CAAC,CAAC;;MAEF;MACA,IAAI,CAACI,QAAQ,CAACO,EAAE,EAAE;QACd,MAAMC,YAAY,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC,CAAC,CAAC;QAC5CX,OAAO,CAACY,KAAK,CAAC,uBAAuB,EAAEF,YAAY,CAAC,CAAC,CAAC;;QAEtD;QACAV,OAAO,CAACC,GAAG,CAAC,sCAAsC,EAAEY,QAAQ,CAACC,MAAM,CAAC;;QAEpE;QACA,MAAM,IAAIC,KAAK,CAAC,UAAUL,YAAY,EAAE,CAAC;MAC7C;;MAEA;MACA,MAAMM,UAAU,GAAG,MAAMd,QAAQ,CAACe,IAAI,CAAC,CAAC;MACxCjB,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAEe,UAAU,CAAC;;MAEpD;MACAhB,OAAO,CAACC,GAAG,CAAC,wCAAwC,EAAEY,QAAQ,CAACC,MAAM,CAAC;;MAEtE;MACAf,QAAQ,CAAC;QACLmB,IAAI,EAAE,mBAAmB;QACzBC,OAAO,EAAEH;MACb,CAAC,CAAC;IACN,CAAC,CAAC,OAAOJ,KAAK,EAAE;MACZ;MACAZ,OAAO,CAACY,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;MACvDb,QAAQ,CAAC;QACLmB,IAAI,EAAE,yBAAyB;QAC/BE,cAAc,EAAER,KAAK,CAACS,OAAO,IAAIT,KAAK,CAAE;MAC5C,CAAC,CAAC;IACN;EACJ,CAAC;AACL,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}