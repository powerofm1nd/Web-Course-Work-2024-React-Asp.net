{"ast":null,"code":"export const registerNewUser = user => {\n  return async dispatch => {\n    console.log('Calling API to register user');\n    try {\n      const response = await fetch('https://localhost:7106/api/auth/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(user),\n        credentials: 'include'\n      });\n      if (!response.ok) {\n        const responseBody = await response.text();\n        console.error(\"Error response body: \", responseBody);\n        console.log(\"Cookies after registration response:\", document.cookie);\n        throw new Error(`Error: ${responseBody}`);\n      }\n      const userFromDb = await response.json();\n      console.log(\"RegisterNewUser RESPONSE:\", userFromDb);\n      console.log(\"Cookies after successful registration:\", document.cookie);\n      dispatch({\n        type: 'REGISTER_NEW_USER',\n        payload: userFromDb\n      });\n    } catch (error) {\n      console.error('Error during user registration:', error);\n      dispatch({\n        type: 'REGISTER_NEW_USER_ERROR',\n        register_error: error.message || error\n      });\n    }\n  };\n};\nexport const getUser = user => {\n  return async dispatch => {\n    console.log('Calling API to get user');\n    dispatch({\n      type: 'GET_USER_LOADING',\n      loading: true\n    });\n    try {\n      const response = await fetch('https://localhost:7106/api/auth/currentUser', {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(user),\n        credentials: 'include'\n      });\n      if (!response.ok) {\n        const responseBody = await response.text();\n        console.error(\"Error response body: \", responseBody);\n        console.log(\"Cookies after error getting user:\", document.cookie);\n        throw new Error(`Error: ${responseBody}`);\n      }\n      const userFromDb = await response.json();\n      console.log(\"GetUser RESPONSE:\", userFromDb);\n      console.log(\"Cookies after successful getting user:\", document.cookie);\n      dispatch({\n        type: 'GET_USER',\n        payload: userFromDb\n      });\n    } catch (error) {\n      console.error('Error during user getting:', error);\n      dispatch({\n        type: 'GET_USER_ERROR',\n        get_user_error: error.message || error\n      });\n    } finally {\n      dispatch({\n        type: 'GET_USER_LOADING',\n        loading: false\n      });\n    }\n  };\n};\nexport const logout = () => {\n  return async dispatch => {\n    console.log('Calling API to logout');\n    try {\n      const response = await fetch('https://localhost:7106/api/auth/logout', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        credentials: 'include'\n      });\n      if (!response.ok) {\n        const responseBody = await response.text();\n        console.error(\"Error response body: \", responseBody);\n        console.log(\"Cookies after error getting user:\", document.cookie);\n        throw new Error(`Error: ${responseBody}`);\n      }\n      const logout = await response.json();\n      console.log(\"Logout RESPONSE:\", logout);\n      dispatch({\n        type: 'LOGOUT_USER'\n      });\n    } catch (error) {\n      console.error('Error during logout process:', error);\n    }\n  };\n};\nexport const login = user => {\n  return async dispatch => {\n    try {\n      const response = await fetch('https://localhost:7106/api/auth/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(user),\n        credentials: 'include'\n      });\n      if (!response.ok) {\n        const responseBody = await response.text();\n        throw new Error(`Error: ${responseBody}`);\n      }\n      const userFromDb = await response.json();\n      dispatch({\n        type: 'AUTH_USER',\n        payload: userFromDb\n      });\n    } catch (error) {\n      dispatch({\n        type: 'AUTH_USER_ERROR',\n        register_error: error.message || error\n      });\n    }\n  };\n};\nexport const authUser = user => {\n  return async dispatch => {\n    console.log('Calling API to auth user');\n    try {\n      const response = await fetch('https://localhost:7106/api/auth/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(user),\n        credentials: 'include'\n      });\n      if (!response.ok) {\n        const responseBody = await response.text();\n        console.error(\"Error response body: \", responseBody);\n        console.log(\"Cookies after auth response:\", document.cookie);\n        throw new Error(`Error: ${responseBody}`);\n      }\n      const userFromDb = await response.json();\n      console.log(\"AuthUser RESPONSE:\", userFromDb);\n      console.log(\"Cookies after successful authorization:\", document.cookie);\n      dispatch({\n        type: 'AUTH_USER',\n        payload: userFromDb\n      });\n    } catch (error) {\n      console.error('Error during user authorization:', error);\n      dispatch({\n        type: 'AUTH_USER_ERROR',\n        register_error: error.message || error\n      });\n    }\n  };\n};","map":{"version":3,"names":["registerNewUser","user","dispatch","console","log","response","fetch","method","headers","body","JSON","stringify","credentials","ok","responseBody","text","error","document","cookie","Error","userFromDb","json","type","payload","register_error","message","getUser","loading","get_user_error","logout","login","authUser"],"sources":["C:/Users/EugenDesktop/Desktop/course work/web-store/src/redux/action/UserAction.js"],"sourcesContent":["export const registerNewUser = (user) => {\r\n    return async (dispatch) => {\r\n        console.log('Calling API to register user');\r\n        try {\r\n            const response = await fetch('https://localhost:7106/api/auth/register', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify(user),\r\n                credentials: 'include',\r\n            });\r\n\r\n\r\n            if (!response.ok) {\r\n                const responseBody = await response.text();\r\n                console.error(\"Error response body: \", responseBody);\r\n\r\n                console.log(\"Cookies after registration response:\", document.cookie);\r\n\r\n                throw new Error(`Error: ${responseBody}`);\r\n            }\r\n\r\n            const userFromDb = await response.json();\r\n            console.log(\"RegisterNewUser RESPONSE:\", userFromDb);\r\n\r\n            console.log(\"Cookies after successful registration:\", document.cookie);\r\n\r\n            dispatch({\r\n                type: 'REGISTER_NEW_USER',\r\n                payload: userFromDb,\r\n            });\r\n        } catch (error) {\r\n            console.error('Error during user registration:', error);\r\n            dispatch({\r\n                type: 'REGISTER_NEW_USER_ERROR',\r\n                register_error: error.message || error,\r\n            });\r\n        }\r\n    };\r\n};\r\n\r\nexport const getUser = (user) => {\r\n    return async (dispatch) => {\r\n        console.log('Calling API to get user');\r\n\r\n        dispatch({ type: 'GET_USER_LOADING', loading: true });\r\n\r\n        try {\r\n            const response = await fetch('https://localhost:7106/api/auth/currentUser', {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify(user),\r\n                credentials: 'include',\r\n            });\r\n\r\n            if (!response.ok) {\r\n                const responseBody = await response.text();\r\n                console.error(\"Error response body: \", responseBody);\r\n\r\n                console.log(\"Cookies after error getting user:\", document.cookie);\r\n\r\n                throw new Error(`Error: ${responseBody}`);\r\n            }\r\n\r\n            const userFromDb = await response.json();\r\n            console.log(\"GetUser RESPONSE:\", userFromDb);\r\n            console.log(\"Cookies after successful getting user:\", document.cookie);\r\n\r\n            dispatch({\r\n                type: 'GET_USER',\r\n                payload: userFromDb,\r\n            });\r\n        } catch (error) {\r\n            console.error('Error during user getting:', error);\r\n\r\n            dispatch({\r\n                type: 'GET_USER_ERROR',\r\n                get_user_error: error.message || error,\r\n            });\r\n        } finally {\r\n            dispatch({ type: 'GET_USER_LOADING', loading: false });\r\n        }\r\n    };\r\n};\r\n\r\nexport const logout = () => {\r\n    return async (dispatch) => {\r\n        console.log('Calling API to logout');\r\n\r\n        try {\r\n            const response = await fetch('https://localhost:7106/api/auth/logout', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                credentials: 'include',\r\n            });\r\n\r\n            if (!response.ok) {\r\n                const responseBody = await response.text();\r\n                console.error(\"Error response body: \", responseBody);\r\n\r\n                console.log(\"Cookies after error getting user:\", document.cookie);\r\n\r\n                throw new Error(`Error: ${responseBody}`);\r\n            }\r\n\r\n            const logout = await response.json();\r\n            console.log(\"Logout RESPONSE:\", logout);\r\n\r\n            dispatch({\r\n                type: 'LOGOUT_USER'\r\n            });\r\n        } catch (error) {\r\n            console.error('Error during logout process:', error);\r\n        }\r\n    };\r\n};\r\n\r\nexport const login = (user) => {\r\n    return async (dispatch) => {\r\n        try {\r\n            const response = await fetch('https://localhost:7106/api/auth/register', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify(user),\r\n                credentials: 'include',\r\n            });\r\n\r\n            if (!response.ok) {\r\n                const responseBody = await response.text();\r\n                throw new Error(`Error: ${responseBody}`);\r\n            }\r\n\r\n            const userFromDb = await response.json();\r\n\r\n            dispatch({ type: 'AUTH_USER', payload: userFromDb, });\r\n        } catch (error) {\r\n            dispatch({\r\n                type: 'AUTH_USER_ERROR',\r\n                register_error: error.message || error,\r\n            });\r\n        }\r\n    };\r\n};\r\n\r\nexport const authUser = (user) => {\r\n    return async (dispatch) => {\r\n        console.log('Calling API to auth user');\r\n        try {\r\n            const response = await fetch('https://localhost:7106/api/auth/login', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify(user),\r\n                credentials: 'include',\r\n            });\r\n\r\n\r\n            if (!response.ok) {\r\n                const responseBody = await response.text();\r\n                console.error(\"Error response body: \", responseBody);\r\n\r\n                console.log(\"Cookies after auth response:\", document.cookie);\r\n\r\n\r\n                throw new Error(`Error: ${responseBody}`);\r\n            }\r\n\r\n            const userFromDb = await response.json();\r\n            console.log(\"AuthUser RESPONSE:\", userFromDb);\r\n\r\n            console.log(\"Cookies after successful authorization:\", document.cookie);\r\n\r\n            dispatch({\r\n                type: 'AUTH_USER',\r\n                payload: userFromDb,\r\n            });\r\n        } catch (error) {\r\n            console.error('Error during user authorization:', error);\r\n            dispatch({\r\n                type: 'AUTH_USER_ERROR',\r\n                register_error: error.message || error,\r\n            });\r\n        }\r\n    };\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}