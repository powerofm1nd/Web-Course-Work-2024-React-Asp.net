{"ast":null,"code":"export const createOrder = orderItems => {\n  return async dispatch => {\n    try {\n      const response = await fetch('https://localhost:7106/api/order/create', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        credentials: 'include',\n        body: JSON.stringify(orderItems)\n      });\n      if (!response.ok) {\n        throw new Error('Failed to create order');\n      }\n      const createdOrder = await response.json();\n      dispatch({\n        type: 'CREATE_ORDER',\n        payload: createdOrder\n      });\n    } catch (error) {\n      console.error('Error creating order:', error);\n      dispatch({\n        type: 'CREATE_ORDER_ERROR',\n        payload: error.message\n      });\n    }\n  };\n};\nexport const removeLastOrder = () => {\n  return {\n    type: \"REMOVE_LAST_ORDER\"\n  };\n};\nexport const getOrdersByUserId = userId => {\n  return async dispatch => {\n    try {\n      const response = await fetch(`https://localhost:7106/api/order/user/${userId}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        credentials: 'include'\n      });\n      if (!response.ok) {\n        throw new Error('Failed to get orders');\n      }\n      const orders = await response.json();\n      dispatch({\n        type: 'GET_ORDERS_BY_USER_ID',\n        payload: orders\n      });\n    } catch (error) {\n      console.error('Error creating order:', error);\n      dispatch({\n        type: 'GET_ORDERS_BY_USER_ID_ERROR',\n        payload: error.message\n      });\n    }\n  };\n};","map":{"version":3,"names":["createOrder","orderItems","dispatch","response","fetch","method","headers","credentials","body","JSON","stringify","ok","Error","createdOrder","json","type","payload","error","console","message","removeLastOrder","getOrdersByUserId","userId","orders"],"sources":["C:/Users/EugenDesktop/Desktop/course work/web-store/src/redux/action/OrderAction.js"],"sourcesContent":["export const createOrder = (orderItems) => {\r\n    return async (dispatch) => {\r\n        try {\r\n            const response = await fetch('https://localhost:7106/api/order/create', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                credentials: 'include', \r\n                body: JSON.stringify(orderItems),\r\n            });\r\n\r\n            if (!response.ok) {\r\n                throw new Error('Failed to create order');\r\n            }\r\n\r\n            const createdOrder = await response.json();\r\n\r\n            dispatch({\r\n                type: 'CREATE_ORDER',\r\n                payload: createdOrder,\r\n            });\r\n        }\r\n        catch (error) {\r\n            console.error('Error creating order:', error);\r\n            dispatch({\r\n                type: 'CREATE_ORDER_ERROR',\r\n                payload: error.message,\r\n            });\r\n        }\r\n    };\r\n};\r\n\r\nexport const removeLastOrder = () => \r\n{\r\n    return {\r\n        type: \"REMOVE_LAST_ORDER\"\r\n    }\r\n}\r\n\r\nexport const getOrdersByUserId = (userId) => \r\n{\r\n    return async (dispatch) => {\r\n        try \r\n        {\r\n            const response = await fetch(`https://localhost:7106/api/order/user/${userId}`, {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                credentials: 'include', \r\n            });\r\n\r\n            if (!response.ok) {\r\n                throw new Error('Failed to get orders');\r\n            }\r\n\r\n            const orders = await response.json();\r\n\r\n            dispatch({\r\n                type: 'GET_ORDERS_BY_USER_ID',\r\n                payload: orders,\r\n            });\r\n        }\r\n        catch (error) {\r\n            console.error('Error creating order:', error);\r\n            dispatch({\r\n                type: 'GET_ORDERS_BY_USER_ID_ERROR',\r\n                payload: error.message,\r\n            });\r\n        }\r\n    };\r\n}"],"mappings":"AAAA,OAAO,MAAMA,WAAW,GAAIC,UAAU,IAAK;EACvC,OAAO,MAAOC,QAAQ,IAAK;IACvB,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,yCAAyC,EAAE;QACpEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACL,cAAc,EAAE;QACpB,CAAC;QACDC,WAAW,EAAE,SAAS;QACtBC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACT,UAAU;MACnC,CAAC,CAAC;MAEF,IAAI,CAACE,QAAQ,CAACQ,EAAE,EAAE;QACd,MAAM,IAAIC,KAAK,CAAC,wBAAwB,CAAC;MAC7C;MAEA,MAAMC,YAAY,GAAG,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC;MAE1CZ,QAAQ,CAAC;QACLa,IAAI,EAAE,cAAc;QACpBC,OAAO,EAAEH;MACb,CAAC,CAAC;IACN,CAAC,CACD,OAAOI,KAAK,EAAE;MACVC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7Cf,QAAQ,CAAC;QACLa,IAAI,EAAE,oBAAoB;QAC1BC,OAAO,EAAEC,KAAK,CAACE;MACnB,CAAC,CAAC;IACN;EACJ,CAAC;AACL,CAAC;AAED,OAAO,MAAMC,eAAe,GAAGA,CAAA,KAC/B;EACI,OAAO;IACHL,IAAI,EAAE;EACV,CAAC;AACL,CAAC;AAED,OAAO,MAAMM,iBAAiB,GAAIC,MAAM,IACxC;EACI,OAAO,MAAOpB,QAAQ,IAAK;IACvB,IACA;MACI,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,yCAAyCkB,MAAM,EAAE,EAAE;QAC5EjB,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACL,cAAc,EAAE;QACpB,CAAC;QACDC,WAAW,EAAE;MACjB,CAAC,CAAC;MAEF,IAAI,CAACJ,QAAQ,CAACQ,EAAE,EAAE;QACd,MAAM,IAAIC,KAAK,CAAC,sBAAsB,CAAC;MAC3C;MAEA,MAAMW,MAAM,GAAG,MAAMpB,QAAQ,CAACW,IAAI,CAAC,CAAC;MAEpCZ,QAAQ,CAAC;QACLa,IAAI,EAAE,uBAAuB;QAC7BC,OAAO,EAAEO;MACb,CAAC,CAAC;IACN,CAAC,CACD,OAAON,KAAK,EAAE;MACVC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7Cf,QAAQ,CAAC;QACLa,IAAI,EAAE,6BAA6B;QACnCC,OAAO,EAAEC,KAAK,CAACE;MACnB,CAAC,CAAC;IACN;EACJ,CAAC;AACL,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}